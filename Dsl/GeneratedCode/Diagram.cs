//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "UPM_IPS.JDCCCAJDOMDCMProyectoIPS.JDCCCAJDOMDCMProyectoIPSDiagram")]

namespace UPM_IPS.JDCCCAJDOMDCMProyectoIPS
{
	/// <summary>
	/// DomainClass JDCCCAJDOMDCMProyectoIPSDiagram
	/// Description for UPM_IPS.JDCCCAJDOMDCMProyectoIPS.JDCCCAJDOMDCMProyectoIPSDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JDCCCAJDOMDCMProyectoIPS.JDCCCAJDOMDCMProyectoIPSDiagram.DisplayName", typeof(global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.JDCCCAJDOMDCMProyectoIPSDomainModel), "UPM_IPS.JDCCCAJDOMDCMProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JDCCCAJDOMDCMProyectoIPS.JDCCCAJDOMDCMProyectoIPSDiagram.Description", typeof(global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.JDCCCAJDOMDCMProyectoIPSDomainModel), "UPM_IPS.JDCCCAJDOMDCMProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.JDCCCAJDOMDCMProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("47eff19f-2cc1-4052-9983-2a6c53339f82")]
	public partial class JDCCCAJDOMDCMProyectoIPSDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.JDCCCAJDOMDCMProyectoIPSToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Diagram styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Silver);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.DiagramBackground, backgroundBrush);
		
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.VentanaPrincipal)
			{
				global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.MetaforaVentanaPrincipal newShape = new global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.MetaforaVentanaPrincipal(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.VentanaSecundaria)
			{
				global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.MetaforaVentanaSecundaria newShape = new global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.MetaforaVentanaSecundaria(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.Menu)
			{
				global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.MetaforaMenu newShape = new global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.MetaforaMenu(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.MetaforaVentanaPrincipal.DecoratorsInitialized += MetaforaVentanaPrincipalDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.MetaforaVentanaSecundaria.DecoratorsInitialized += MetaforaVentanaSecundariaDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.MetaforaMenu.DecoratorsInitialized += MetaforaMenuDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaVentanaPrincipal.
		/// </summary>
		internal static partial class MetaforaVentanaPrincipalDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaVentanaPrincipal.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.Ventana.nombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "nombreDec").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.Ventana.nombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "nombreDec").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaVentanaSecundaria.
		/// </summary>
		internal static partial class MetaforaVentanaSecundariaDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaVentanaSecundaria.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.Ventana.nombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "nombreDec").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaMenu.
		/// </summary>
		internal static partial class MetaforaMenuDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaMenu.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.Menu.tituloDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "nombreDec").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// JDCCCAJDOMDCMProyectoIPSDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x47eff19f, 0x2cc1, 0x4052, 0x99, 0x83, 0x2a, 0x6c, 0x53, 0x33, 0x9f, 0x82);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public JDCCCAJDOMDCMProyectoIPSDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public JDCCCAJDOMDCMProyectoIPSDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace UPM_IPS.JDCCCAJDOMDCMProyectoIPS
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.VentanaPrincipal), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.VentanaSecundaria), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.Menu), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.VentanaPrincipal)
				{
					parentElement = GetParentForVentanaPrincipal((global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.VentanaPrincipal)childElement);
				} else
				if(childElement is global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.VentanaSecundaria)
				{
					parentElement = GetParentForVentanaSecundaria((global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.VentanaSecundaria)childElement);
				} else
				if(childElement is global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.Menu)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForMenu(Menu childElement)
					// {
					// }
					// must be implemented in a partial class of UPM_IPS.JDCCCAJDOMDCMProyectoIPS.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForMenu((global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.Menu)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.TapizVentanas GetParentForVentanaPrincipal( global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.VentanaPrincipal root )
			{
				// Segments 0 and 1
				global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.TapizVentanas result = root.TapizVentanas;
				if ( result == null ) return null;
				return result;
			}
			public static global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.TapizVentanas GetParentForVentanaSecundaria( global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.VentanaSecundaria root )
			{
				// Segments 0 and 1
				global::UPM_IPS.JDCCCAJDOMDCMProyectoIPS.TapizVentanas result = root.TapizVentanas;
				if ( result == null ) return null;
				return result;
			}
		}
		
	
	}
